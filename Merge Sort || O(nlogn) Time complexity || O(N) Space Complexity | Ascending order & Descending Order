#include<iostream>
#include<cmath>
#include<vector>
using namespace std;
//Ascending Order
void Merge(int arr[],int low,int mid,int high){
  int left = low;
  int right=mid+1;
  vector<int>temp;
  while(left<=mid && right<=high){
    if(arr[left]<=arr[right]){
      temp.push_back(arr[left]);
      left++;
    }
    else{
      temp.push_back(arr[right]);
      right++;
    }
  }
  while(left<=mid){
    temp.push_back(arr[left]);
    left++;
  }
  while(right<=high){
    temp.push_back(arr[right]);
    right++;
  }

  for(int i=low; i<=high; i++){
    arr[i]=temp[i-low];
  }
}
void MergeSort(int arr[],int low , int high){
  if (low==high){
    return;
  }
  int mid = (low+high)/2;
  MergeSort(arr,low,mid);
  MergeSort(arr,mid+1,high);
  Merge(arr,low,mid,high);
}
int main(){
  int arr[]={5,100,3,56,0,1};
  int size = 6;
  MergeSort(arr,0,size-1);
  for(int i=0; i<6; i++){
    cout<<arr[i]<<" ";
  }
  return 0;
}
____________________________________________________________________________________
____________________________________________________________________________________

#include<iostream>
#include<cmath>
#include<vector>
using namespace std;
//Descending Order
void Merge(int arr[],int low,int mid,int high){
  int left = low;
  int right=mid+1;
  vector<int>temp;
  while(left>=mid && right<=high){
    if(arr[left]<=arr[right]){
      temp.push_back(arr[left]);
      left++;
    }
    else{
      temp.push_back(arr[right]);
      right++;
    }
  }
  while(left<=mid){
    temp.push_back(arr[left]);
    left++;
  }
  while(right<=high){
    temp.push_back(arr[right]);
    right++;
  }

  for(int i=low; i<=high; i++){
    arr[i]=temp[i-low];
  }
}
void MergeSort(int arr[],int low , int high){
  if (low==high){
    return;
  }
  int mid = (low+high)/2;
  MergeSort(arr,low,mid);
  MergeSort(arr,mid+1,high);
  Merge(arr,low,mid,high);
}
int main(){
  int arr[]={5,100,3,56,0,1};
  int size = 6;
  MergeSort(arr,0,size-1);
  for(int i=0; i<6; i++){
    cout<<arr[i]<<" ";
  }
  return 0;

}
